mutation SignIn($userId: String!, $password: String!) {
    signin(userId: $userId, password: $password) {
        token
    }
}

mutation SignUp($data: UserInput!) {
    signup(data : $data) {
        name
    }
}

mutation changePW($userId: String!, $old: String!, $new: String!) {
    updateNewPassword(email:$userId
                      newPassword:$new,
                      oldPassword:$old) {
        name
    }
}

mutation updateUser($data: UserUpdateInput!, $where: UserWhereUniqueInput!) {
    updateUser(where : $where,
               data : $data) {
        name
    }
}

mutation createRoom($roomName: String!, $userId: ID!, $year: DateTime!) {
    createChatRoom(data :{
                   name : $roomName
                   userIds: [$userId]
                   chatRoomAt: $year
                   }) {
        inviteCode
    }
}

mutation updateChatRoom($id: ID!, $newName: String!, $newYear: DateTime!) {
    updateChatRoom(id: $id,
                   data : {
                   name : $newName
                   chatRoomAt: $newYear
                   }) {
        id
    }
}

mutation withdrawKid($chatroomID: ID!, $userID: ID!, $kidName: String!) {
    withdrawChatRoomUser(id : $chatroomID,
                         data : {
                         userId: $userID
                         kidName: $kidName
                         }) {
        id
    }
    
}

mutation setOffice($crontab: String!) {
    upsertOfficePeriod(data: {crontab :$crontab}) {
        crontab
    }
}

query getUserInfo($id: ID!, $userId: String) {
    chatRooms(where: { users_some: { userId: $userId }}) {
        ...ChatRoomApolloFragment
    }
    
    officePeriods(where: {user : {id : $id}}) {
        crontab
    }
}

query getUserInfoInStart($id: ID!, $userId: String!) {
    chatRooms(where: { users_some: { userId: $userId }}) {
        ...ChatRoomApolloFragment
    }
    
    officePeriods(where: {user : {id : $id}}) {
        crontab
    }
    
    messageSummaries(
                     where: {
                     OR: [{ sender: { userId: $userId } },
                          { receiver: { userId: $userId } }]
                     }
                     ) {
        ... MessageSummaryApolloFragment
    }
}

mutation uploadFile($file: Upload!) {
    multipleUpload(files: [$file])
}

query getCronTab($id: ID!) {
    officePeriods(where: {user : {id : $id}}) {
        crontab
    }
}

query MyChatrooms($userId: String) {
    chatRooms(where: { admins_some: { userId: $userId }}) {
        ...ChatRoomApolloFragment
    }
}


query MessageSummaries($userId: String!) {
    messageSummaries(
                     where: {
                     OR: [{ sender: { userId: $userId } },
                          { receiver: { userId: $userId } }]
                     }
                     ) {
        ... MessageSummaryApolloFragment
    }
}

mutation ReadMessage($chatroom: ID!, $sender: ID!, $receiver: ID!) {
    readMessage(chatRoomId : $chatroom,
                receiverId : $receiver,
                senderId : $sender) {
        lastMessage {
            text
        }
    }
}

mutation kakaoSignUp($role: Role!, $userId: String!) {
    kakaoSignup(data: {kakaoUserId: $userId,
                role : $role }) {
        userId
        id
    }
}

mutation kakaoSignIn($userId: String!) {
    kakaoSignin(kakaoUserId : $userId) {
        token
    }
}

mutation registerPushKey($pushKey: String!) {
    registerNotification(data : {pushKey : $pushKey}) {
        pushKey
    }
}

mutation refreshEmail($email: String!) {
    sendNewPasswordByEmail(email : $email)
}
    
query Messages($chatRoomId: ID!, $myId: String!, $userId: String!, $pageCount: Int!, $startCursor: String) {
    messages(
             where:{
             chatRoom: {
             id: $chatRoomId
             }
             receivers_some : {
             userId_in: [ $myId, $userId ]
             }
             sender: {
             userId_in : [ $myId, $userId ]
             }
             },
             last: $pageCount
             before: $startCursor
             ) {
        ... MessageApolloFragment
    }
}

query Me {
    me {
        ...UserApolloFragment
    }
}

subscription MessageSubscription {
    message {
        ... MessageSubscriptionPayloadApolloFragment
    }
}

mutation SendMessage($text: String!, $chatRoomId: ID!, $receiverId: ID!, $fileIds: [ID!]!) {
    sendMessage(data: {
                text : $text
                chatRoomId : $chatRoomId
                fileIds : $fileIds
                receiverIds : [$receiverId]
                }) {
        ... MessageApolloFragment
    }
}

mutation VerifyEmailResponse($email: String!) {
    verifyEmail(email: $email) {
        verifyCode
    }
}

query GetChatroom($code: String!) {
    chatRooms(where: { inviteCode : $code}) {
        ...ChatRoomApolloFragment
    }
}

mutation ApplyChatRoom($id: ID!, $userId: ID!, $kidName: String!) {
    applyChatRoom(id: $id, data : {userId:$userId
                  kidName :$kidName}) {
        id
    }
}

query getOfficeTime($userId: String!) {
    officePeriods(where :{user :{userId :$userId}}) {
        crontab
    }
}


fragment UserApolloFragment on User {
    id
    type
    role
    userId
    name
    profileImageUrl
    phoneNumber
}

fragment KidApolloFragment on Kid {
    id
    name
    parents { ...UserApolloFragment }
}

fragment ChatRoomSummaryApolloFragment on ChatRoom {
    id
    name
    chatRoomAt
    createdAt
}

fragment ChatRoomApolloFragment on ChatRoom {
    id
    name
    admins { ...UserApolloFragment }
    users { ...UserApolloFragment }
    kids { ...KidApolloFragment }
    inviteCode,
    chatRoomAt
    createdAt
}

fragment MessageSubscriptionPayloadApolloFragment on MessageSubscriptionPayload {
    mutation
    node { ...MessageApolloFragment }
    updatedFields
    previousValues {...MessagePreviousValuesApolloFragment}
}

fragment MessageApolloFragment on Message {
    id
    chatRoom { id }
    text
    receivers {
        userId
        profileImageUrl
        name
    }
    sender {
        userId
        profileImageUrl
        name
    }
    createdAt
    readedAt
}

fragment MessagePreviousValuesApolloFragment on MessagePreviousValues {
    id
    text
    createdAt
    readedAt
}

fragment MessageSummaryApolloFragment on MessageSummary {
    id
    chatRoom { ...ChatRoomSummaryApolloFragment }
    sender { ...UserApolloFragment },
    receiver { ...UserApolloFragment },
    unReadMessageCount,
    lastMessage { ...MessageApolloFragment }
    createdAt
}
